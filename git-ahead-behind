#!/bin/sh

usage(){
	echo "Usage: $0" >&2
	exit 1
}

col_count='[36m'
col_branch='[33m'
col_branch_HEAD='[1;33m'
col_err='[1;30m'
col_ahead='[32m'
col_behind='[31m'
col_off='[0;0m'

if [ -t 1 ]
then color=1
else color=0
fi

for arg
do
	if test "$arg" = -c
	then
		color=1
	else
		usage
	fi
done

if test $color = 0
then
	col_count=
	col_branch=
	col_branch_HEAD=
	col_err=
	col_ahead=
	col_behind=
	col_off=
fi

revcnt(){
	git rev-list --count "$1"
}

out(){
	printf '%s' "$*"
}

set -e

git branch \
	| while read maybe_star local
	do
		if test "$maybe_star" = '*'
		then
			star='*'
		else
			star=''
			local="$maybe_star"
		fi

		local_upstream="$local@{u}"

		if ! remote="$(
			git rev-parse --abbrev-ref --symbolic-full-name "$local_upstream" 2>/dev/null
		)"
		then
			if test -n "$star"
			then col_this_branch="$col_branch_HEAD"
			else col_this_branch="$col_err"
			fi
			printf >&2 '%s%s has no upstream%s\n' "$col_this_branch" "$local" "$col_off"
			continue
		fi

		if base=`git merge-base "$local" "$remote"`
		then
			ahead_count=`revcnt "$base".."$local"`
			behind_count=`revcnt "$base".."$remote"`

			if test -n "$star"
			then col_this_branch="$col_branch_HEAD"
			else col_this_branch="$col_branch"
			fi

			out "${col_this_branch}$local $remote "

			if test $ahead_count -gt 0
			then out "${col_ahead}ahead ${col_count}$ahead_count "
			fi
			if test $behind_count -gt 0
			then out "${col_behind}behind ${col_count}$behind_count "
			fi

			echo "$col_off"
		else
			printf >&2 '%s%s has nothing in common with %s%s\n' "$col_err" "$local" "$remote" "$col_off"
		fi
	done
